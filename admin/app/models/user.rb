#require 'digest/md5'

# this model expects a certain database layout and its based on the name/login pattern. 
class User < ActiveRecord::Base

  has_and_belongs_to_many :roles
  has_many :experiments
  validates_presence_of :login
  validates_uniqueness_of :login

  # Return true/false if User is authorized for resource.
  def authorized?(resource)
    match=false
    permission_strings.each do |p|
      r = Regexp.new(p)
      match = match || ((r =~ resource) != nil)
    end
    return match
  end

  # Load permission strings 
  def permission_strings
    a = []
    self.roles.each{|r| r.permissions.each{|p| a<< p.name }}
    a
  end

  # Autogenerated code below

  def self.authenticate(login, pass)
    find_first(["login = ? AND password = ?", login, pass]) # changed from md5(pass)
  end  

  def change_password(pass)
    update_attribute "password", pass # changed from self.class.md5(pass)
  end
    
  protected

#  def self.md5(pass)
#    Digest::MD5.hexdigest("#{pass}")
#  end
    
  before_create :crypt_password
  
  def crypt_password
    write_attribute("password", password) # changed from self.class.md5(password)
  end

  validates_length_of :login, :within => 3..40
  validates_length_of :password, :within => 5..40
  validates_presence_of :login, :password, :password_confirmation
  validates_uniqueness_of :login, :on => :save
  validates_confirmation_of :password, :on => :save     
end
