BEGIN TRANSACTION;
CREATE TABLE users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  login VARCHAR(40) UNIQUE NOT NULL,
  name VARCHAR(40),
  password VARCHAR(40) NOT NULL,
  email VARCHAR(100),
  modified_at DATETIME,
  created_at DATETIME,
  access DATETIME,
  is_deleted INTEGER NOT NULL
);
INSERT INTO "users" VALUES(2, 'curator', 'Curator', 'curator', 'miamexpress@ebi.ac.uk', '2006-08-11 14:18:19', '2006-05-16 11:36:57', '2006-11-01T11:33:49Z', 0);
INSERT INTO "users" VALUES(3, 'test', 'Test submitter', 'test', 'noreply@ebi.ac.uk', NULL, '2006-05-16 11:37:15', '2006-12-05T14:44:09Z', 0);
DELETE FROM sqlite_sequence;
INSERT INTO "sqlite_sequence" VALUES('categories', 28);
INSERT INTO "sqlite_sequence" VALUES('designs', 32);
INSERT INTO "sqlite_sequence" VALUES('materials', 3);
INSERT INTO "sqlite_sequence" VALUES('organisms', 15);
INSERT INTO "sqlite_sequence" VALUES('taxons', 7);
INSERT INTO "sqlite_sequence" VALUES('experiments', 0);
INSERT INTO "sqlite_sequence" VALUES('design_instances', 0);
INSERT INTO "sqlite_sequence" VALUES('material_instances', 0);
INSERT INTO "sqlite_sequence" VALUES('organism_instances', 0);
INSERT INTO "sqlite_sequence" VALUES('protocols', 0);
INSERT INTO "sqlite_sequence" VALUES('array_designs', 0);
INSERT INTO "sqlite_sequence" VALUES('users', 3);
INSERT INTO "sqlite_sequence" VALUES('roles', 3);
INSERT INTO "sqlite_sequence" VALUES('permissions', 12);
INSERT INTO "sqlite_sequence" VALUES('spreadsheets', 0);
INSERT INTO "sqlite_sequence" VALUES('data_files', 0);
CREATE TABLE roles (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(40) NOT NULL,
  info VARCHAR(80)
, is_deleted INTEGER NOT NULL);
INSERT INTO "roles" VALUES(1, 'admin', 'System superuser', 0);
INSERT INTO "roles" VALUES(2, 'curator', 'Annotation and automation access', 0);
INSERT INTO "roles" VALUES(3, 'submitter', 'Low-privilege user', 0);
CREATE TABLE permissions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(40) NOT NULL,
  info VARCHAR(80) NULL
, is_deleted INTEGER NOT NULL);
INSERT INTO "permissions" VALUES(1, '.*/.*', 'Access All Areas', 0);
INSERT INTO "permissions" VALUES(2, 'experiments/.*', 'Full experiment access', 0);
INSERT INTO "permissions" VALUES(4, 'array_designs/.*', 'Full MIAMExpress array access', 0);
INSERT INTO "permissions" VALUES(5, 'protocols/.*', 'Full Tab2MAGE protocol access', 0);
INSERT INTO "permissions" VALUES(6, 'tab2mages/.*', 'Full Tab2MAGE experiment access', 0);
INSERT INTO "permissions" VALUES(7, 'miamexps/.*', 'Full MIAMExpress experiment access', 0);
INSERT INTO "permissions" VALUES(8, 'design/.*', 'Full designs access', 0);
INSERT INTO "permissions" VALUES(9, 'material/.*', 'Full materials access', 0);
INSERT INTO "permissions" VALUES(10, 'organism/.*', 'Full organisms access', 0);
INSERT INTO "permissions" VALUES(11, 'taxon/.*', 'Full taxons access', 0);
INSERT INTO "permissions" VALUES(12, 'category/.*', 'Full categories access', 0);
CREATE TABLE categories (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  ontology_term varchar default NULL,
  display_label varchar default NULL,
  is_common integer default null,
  is_bmc integer default null,
  is_fv integer default null,
  is_deleted INTEGER NOT NULL);
INSERT INTO "categories" VALUES(1, 'Age', 'Age', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(2, 'OrganismPart', 'Organism part', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(3, 'DiseaseState', 'Disease state', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(4, 'CellLine', 'Cell line', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(5, 'CellType', 'Cell type', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(6, 'DevelopmentalStage', 'Developmental stage', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(7, 'DiseaseStaging', 'Disease staging', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(8, 'EnvironmentalHistory', 'Environmental history', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(9, 'GeneticModification', 'Genetic modification', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(10, 'Histology', 'Histology', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(11, 'Individual', 'Individual', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(12, 'Genotype', 'Genotype', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(13, 'OrganismStatus', 'Alive or dead?', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(14, 'Phenotype', 'Phenotype', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(15, 'Sex', 'Sex', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(16, 'StrainOrLine', 'Strain or line', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(17, 'TargetedCellType', 'Targeted cell type', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(18, 'TumorGrading', 'Tumor grading', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(19, 'Ecotype', 'Ecotype', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(20, 'ClinicalHistory', 'Clinical history', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(21, 'Time', 'Time', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(22, 'Compound', 'Compound', NULL, NULL, 1, 0);
INSERT INTO "categories" VALUES(23, 'Dose', 'Dose', NULL, NULL, 1, 0);
INSERT INTO "categories" VALUES(24, 'Organism', 'Species', 1, 1, 1, 0);
INSERT INTO "categories" VALUES(25, 'TimeUnit', 'Time Units', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(26, 'InitialTimePoint', 'Initial Time Point', NULL, 1, 1, 0);
INSERT INTO "categories" VALUES(27, 'BioSourceProvider', 'BioSource Provider', 1, 1, 1, 0);
INSERT INTO "categories" VALUES(28, 'BioSourceType', 'BioSource Type', 1, 1, 1, 0);
CREATE TABLE designs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  display_label varchar default NULL,
  ontology_category varchar default NULL,
  ontology_value varchar default NULL,
  design_type char(15) NOT NULL
, is_deleted INTEGER NOT NULL);
INSERT INTO "designs" VALUES(1, 'Disease state', 'ExperimentalDesignType', 'disease_state_design', 'biological', 0);
INSERT INTO "designs" VALUES(2, 'CGH', 'ExperimentalDesignType', 'comparative_genome_hybridization_design', 'technological', 0);
INSERT INTO "designs" VALUES(3, 'Behavior', 'ExperimentalDesignType', 'innate_behavior_design', 'biological', 0);
INSERT INTO "designs" VALUES(4, 'Cell type comparison', 'ExperimentalDesignType', 'cell_type_comparison_design', 'biological', 0);
INSERT INTO "designs" VALUES(5, 'Development or differentiation', 'ExperimentalDesignType', 'development_or_differentiation_design', 'biological', 0);
INSERT INTO "designs" VALUES(6, 'Genetic characteristics', 'ExperimentalDesignType', 'individual_genetic_characteristics_design', 'biological', 0);
INSERT INTO "designs" VALUES(7, 'Genetic modification', 'ExperimentalDesignType', 'genetic_modification_design', 'biological', 0);
INSERT INTO "designs" VALUES(8, 'Organism part comparison', 'ExperimentalDesignType', 'organism_part_comparison_design', 'biological', 0);
INSERT INTO "designs" VALUES(9, 'Sex', 'ExperimentalDesignType', 'sex_design', 'biological', 0);
INSERT INTO "designs" VALUES(10, 'Strain or line', 'ExperimentalDesignType', 'strain_or_line_design', 'biological', 0);
INSERT INTO "designs" VALUES(11, 'Clinical history', 'ExperimentalDesignType', 'clinical_history_design', 'biological', 0);
INSERT INTO "designs" VALUES(12, 'Time series', 'ExperimentalDesignType', 'time_series_design', 'biological', 0);
INSERT INTO "designs" VALUES(13, 'Compound treatment', 'ExperimentalDesignType', 'compound_treatment_design', 'biological', 0);
INSERT INTO "designs" VALUES(14, 'Dye swap', 'MethodologicalDesignType', 'dye_swap_design', 'methodological', 0);
INSERT INTO "designs" VALUES(15, 'Reference', 'MethodologicalDesignType', 'reference_design', 'methodological', 0);
INSERT INTO "designs" VALUES(16, 'Chromatin immunoprecipitation', 'ExperimentalDesignType', 'binding_site_identification_design', 'technological', 0);
INSERT INTO "designs" VALUES(17, 'Transcription profiling', 'ExperimentalDesignType', 'co-expression_design', 'technological', 0);
INSERT INTO "designs" VALUES(18, 'Dose response', 'ExperimentalDesignType', 'dose_response_design', 'biological', 0);
INSERT INTO "designs" VALUES(19, 'Tiling path design', 'MethodologicalDesignType', 'tiling_path_design', 'technological', 0);
INSERT INTO "designs" VALUES(20, 'RNAi', 'PerturbationalDesign', 'cellular_modification_design', 'technological', 0);
INSERT INTO "designs" VALUES(21, 'SNP profiling', 'BioMolecularAnnotation', 'genotyping_design', 'technological', 0);
INSERT INTO "designs" VALUES(22, 'Species', 'BiologicalProperty', 'species_design', 'biological', 0);
INSERT INTO "designs" VALUES(23, 'All pairs', 'MethodologicalDesignType', 'all_pairs', 'methodological', 0);
INSERT INTO "designs" VALUES(24, 'Array platform comparison', 'MethodologicalDesignType', 'array_platform_comparison_design', 'methodological', 0);
INSERT INTO "designs" VALUES(25, 'Loop', 'MethodologicalDesignType', 'loop_design', 'methodological', 0);
INSERT INTO "designs" VALUES(26, 'Normalization testing', 'MethodologicalDesignType', 'normalization_testing_design', 'methodological', 0);
INSERT INTO "designs" VALUES(27, 'Quality control testing', 'MethodologicalDesignType', 'quality_control_testing_design', 'methodological', 0);
INSERT INTO "designs" VALUES(28, 'Replicate', 'MethodologicalDesignType', 'replicate_design', 'methodological', 0);
INSERT INTO "designs" VALUES(29, 'Software variation', 'MethodologicalDesignType', 'software_variation_design', 'methodological', 0);
INSERT INTO "designs" VALUES(30, 'In vitro', 'ExperimentalDesignType', 'in_vitro_design', 'methodological', 0);
INSERT INTO "designs" VALUES(31, 'In vivo', 'ExperimentalDesignType', 'in_vivo_design', 'methodological', 0);
INSERT INTO "designs" VALUES(32, 'Ex vivo', 'ExperimentalDesignType', 'ex_vivo_design', 'methodological', 0);
CREATE TABLE materials (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  display_label varchar default NULL,
  ontology_category varchar default NULL,
  ontology_value varchar default NULL
, is_deleted INTEGER NOT NULL);
INSERT INTO "materials" VALUES(1, 'Organism part', 'MaterialType', 'organism_part', 0);
INSERT INTO "materials" VALUES(2, 'Cell culture', 'MaterialType', 'cell', 0);
INSERT INTO "materials" VALUES(3, 'Whole organism', 'MaterialType', 'whole_organism', 0);
CREATE TABLE taxons (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  scientific_name varchar default NULL,
  common_name varchar default NULL,
  accession INTEGER default NULL
, is_deleted INTEGER NOT NULL);
INSERT INTO "taxons" VALUES(1, 'Primates', 'Primates', 9443, 0);
INSERT INTO "taxons" VALUES(2, 'Ascomycota', 'Yeasts', 4890, 0);
INSERT INTO "taxons" VALUES(3, 'Rodentia', 'Rodents', 9989, 0);
INSERT INTO "taxons" VALUES(4, 'Viridiplantae', 'Green plants', 33090, 0);
INSERT INTO "taxons" VALUES(5, 'Insecta', 'True insects', 50557, 0);
INSERT INTO "taxons" VALUES(6, 'Bacteria', 'Eubacteria', 2, 0);
INSERT INTO "taxons" VALUES(7, 'Plasmodium', 'Plasmodium', 5820, 0);
CREATE TABLE organisms (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  scientific_name varchar default NULL,
  common_name varchar default NULL,
  accession INTEGER default NULL,
  taxon_id INTEGER NOT NULL
    CONSTRAINT fk_o_taxon_id REFERENCES taxons(id)
    ON DELETE RESTRICT
, is_deleted INTEGER NOT NULL);
INSERT INTO "organisms" VALUES(1, 'Homo sapiens', 'Human', 9606, 1, 0);
INSERT INTO "organisms" VALUES(2, 'Saccharomyces cerevisiae', 'Baker''s yeast', 4932, 2, 0);
INSERT INTO "organisms" VALUES(3, 'Schizosaccharomyces pombe', 'Fission yeast', 4896, 2, 0);
INSERT INTO "organisms" VALUES(4, 'Mus musculus', 'House mouse', 10090, 3, 0);
INSERT INTO "organisms" VALUES(5, 'Escherichia coli', 'E. coli', 562, 6, 0);
INSERT INTO "organisms" VALUES(6, 'Arabidopsis thaliana', 'Thale cress', 3702, 4, 0);
INSERT INTO "organisms" VALUES(7, 'Rattus norvegicus', 'Norway rat', 10116, 3, 0);
INSERT INTO "organisms" VALUES(8, 'Pan troglodytes', 'Chimpanzee', 9598, 1, 0);
INSERT INTO "organisms" VALUES(9, 'Apis mellifera', 'Honey bee', 7460, 5, 0);
INSERT INTO "organisms" VALUES(11, 'Plasmodium falciparum', 'Malaria parasite P. falciparum', 5833, 7, 0);
INSERT INTO "organisms" VALUES(12, 'Macaca fascicularis', 'crab-eating macaque', 9541, 1, 0);
INSERT INTO "organisms" VALUES(13, 'Macaca fascicularis', 'Crab-eating macaque', 9541, 1, 1);
INSERT INTO "organisms" VALUES(14, 'Anopheles gambiae', 'African malaria mosquito', 7165, 5, 0);
INSERT INTO "organisms" VALUES(15, 'Aedes aegypti', 'yellow fever mosquito', 7159, 5, 0);
CREATE TABLE experiments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  accession CHAR(15),
  name VARCHAR(255),
  user_id INTEGER default NULL
    CONSTRAINT fk_e_user_id REFERENCES users(id)
    ON DELETE RESTRICT,
  checker_score INTEGER,
  software VARCHAR(100),
  status VARCHAR(100),
  data_warehouse_ready INTEGER,
  date_last_edited DATETIME,
  date_submitted DATETIME,
  date_last_processed DATETIME,
  in_curation INTEGER,
  curator CHAR(30),
  comment TEXT,
  experiment_type CHAR(30),
  miamexpress_login CHAR(30),
  miamexpress_subid INTEGER,
  is_affymetrix INTEGER,
  is_mx_batchloader INTEGER,
  is_deleted INTEGER NOT NULL, miame_score INTEGER, in_data_warehouse INTEGER);
CREATE TABLE data_files (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  experiment_id INTEGER NOT NULL
    CONSTRAINT fk_datafile_expt_id REFERENCES experiments(id)
    ON DELETE RESTRICT,
  name VARCHAR(255),
  is_unpacked INTEGER,
  is_deleted INTEGER NOT NULL);
CREATE TABLE spreadsheets (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  experiment_id INTEGER NOT NULL
    CONSTRAINT fk_spreadsheet_expt_id REFERENCES experiments(id)
    ON DELETE RESTRICT,
  name VARCHAR(255)
, is_deleted INTEGER NOT NULL);
CREATE TABLE protocols (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  accession CHAR(15) UNIQUE,
  user_accession VARCHAR(100),
  expt_accession CHAR(15),
  name VARCHAR(255),
  date_last_processed DATETIME,
  comment TEXT
, is_deleted INTEGER NOT NULL);
CREATE TABLE array_designs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  miamexpress_subid INTEGER UNIQUE,
  accession CHAR(15),
  name VARCHAR(255),
  miamexpress_login CHAR(50),
  status VARCHAR(100),
  data_warehouse_ready CHAR(15),
  date_last_processed DATETIME,
  comment TEXT
, is_deleted INTEGER NOT NULL, miame_score INTEGER, in_data_warehouse INTEGER);
CREATE TABLE categories_designs (
  category_id INTEGER NOT NULL
    CONSTRAINT fk_cd_category_id REFERENCES categories(id)
    ON DELETE CASCADE,
  design_id INTEGER NOT NULL
    CONSTRAINT fk_cd_design_id REFERENCES designs(id)
    ON DELETE CASCADE
);
INSERT INTO "categories_designs" VALUES(3, 1);
INSERT INTO "categories_designs" VALUES(8, 3);
INSERT INTO "categories_designs" VALUES(12, 3);
INSERT INTO "categories_designs" VALUES(16, 2);
INSERT INTO "categories_designs" VALUES(5, 4);
INSERT INTO "categories_designs" VALUES(6, 5);
INSERT INTO "categories_designs" VALUES(12, 6);
INSERT INTO "categories_designs" VALUES(9, 7);
INSERT INTO "categories_designs" VALUES(12, 7);
INSERT INTO "categories_designs" VALUES(2, 8);
INSERT INTO "categories_designs" VALUES(15, 9);
INSERT INTO "categories_designs" VALUES(16, 10);
INSERT INTO "categories_designs" VALUES(20, 11);
INSERT INTO "categories_designs" VALUES(22, 13);
INSERT INTO "categories_designs" VALUES(23, 13);
INSERT INTO "categories_designs" VALUES(21, 12);
INSERT INTO "categories_designs" VALUES(23, 18);
INSERT INTO "categories_designs" VALUES(3, 2);
INSERT INTO "categories_designs" VALUES(24, 2);
INSERT INTO "categories_designs" VALUES(12, 21);
INSERT INTO "categories_designs" VALUES(24, 22);
INSERT INTO "categories_designs" VALUES(1, 5);
INSERT INTO "categories_designs" VALUES(25, 12);
CREATE TABLE categories_materials (
  category_id INTEGER NOT NULL
    CONSTRAINT fk_cm_category_id REFERENCES categories(id)
    ON DELETE CASCADE,
  material_id INTEGER NOT NULL
    CONSTRAINT fk_cm_material_id REFERENCES materials(id)
    ON DELETE CASCADE
);
INSERT INTO "categories_materials" VALUES(2, 1);
INSERT INTO "categories_materials" VALUES(4, 2);
INSERT INTO "categories_materials" VALUES(5, 2);
INSERT INTO "categories_materials" VALUES(1, 3);
INSERT INTO "categories_materials" VALUES(11, 3);
INSERT INTO "categories_materials" VALUES(15, 3);
CREATE TABLE categories_taxons (
  category_id INTEGER NOT NULL
    CONSTRAINT fk_ct_category_id REFERENCES categories(id)
    ON DELETE CASCADE,
  taxon_id INTEGER NOT NULL
    CONSTRAINT fk_ct_taxon_id REFERENCES taxons(id)
    ON DELETE CASCADE
);
INSERT INTO "categories_taxons" VALUES(1, 1);
INSERT INTO "categories_taxons" VALUES(15, 1);
INSERT INTO "categories_taxons" VALUES(12, 2);
INSERT INTO "categories_taxons" VALUES(15, 2);
INSERT INTO "categories_taxons" VALUES(16, 2);
INSERT INTO "categories_taxons" VALUES(12, 6);
INSERT INTO "categories_taxons" VALUES(16, 6);
INSERT INTO "categories_taxons" VALUES(6, 5);
INSERT INTO "categories_taxons" VALUES(12, 5);
INSERT INTO "categories_taxons" VALUES(16, 5);
INSERT INTO "categories_taxons" VALUES(16, 3);
INSERT INTO "categories_taxons" VALUES(6, 4);
INSERT INTO "categories_taxons" VALUES(2, 4);
INSERT INTO "categories_taxons" VALUES(7, 5);
INSERT INTO "categories_taxons" VALUES(25, 1);
INSERT INTO "categories_taxons" VALUES(26, 1);
INSERT INTO "categories_taxons" VALUES(6, 7);
INSERT INTO "categories_taxons" VALUES(12, 7);
INSERT INTO "categories_taxons" VALUES(16, 7);
CREATE TABLE design_instances (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  design_id INTEGER NOT NULL
    CONSTRAINT fk_di_design_id REFERENCES designs(id)
    ON DELETE CASCADE,
  experiment_id INTEGER NOT NULL
    CONSTRAINT fk_di_experiment_id REFERENCES experiments(id)
    ON DELETE CASCADE
);
CREATE TABLE material_instances (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  material_id INTEGER NOT NULL
    CONSTRAINT fk_mi_material_id REFERENCES materials(id)
    ON DELETE CASCADE,
  experiment_id INTEGER NOT NULL
    CONSTRAINT fk_mi_experiment_id REFERENCES experiments(id)
    ON DELETE CASCADE
);
CREATE TABLE organism_instances (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  organism_id INTEGER NOT NULL
    CONSTRAINT fk_oi_organism_id REFERENCES organisms(id)
    ON DELETE CASCADE,
  experiment_id INTEGER NOT NULL
    CONSTRAINT fk_oi_experiment_id REFERENCES experiments(id)
    ON DELETE CASCADE
);
CREATE TABLE roles_users (
  user_id INTEGER NOT NULL
    CONSTRAINT fk_ru_user_id REFERENCES users(id)
    ON DELETE CASCADE,
  role_id INTEGER NOT NULL
    CONSTRAINT fk_ru_role_id REFERENCES roles(id)
    ON DELETE CASCADE
);
INSERT INTO "roles_users" VALUES(2, 2);
INSERT INTO "roles_users" VALUES(3, 3);
INSERT INTO "roles_users" VALUES(5, 3);
CREATE TABLE permissions_roles (
  role_id INTEGER NOT NULL
    CONSTRAINT fk_pr_role_id REFERENCES roles(id)
    ON DELETE CASCADE,
  permission_id INTEGER NOT NULL
    CONSTRAINT fk_pr_permission_id REFERENCES permissions(id)
    ON DELETE CASCADE
);
INSERT INTO "permissions_roles" VALUES(1, 1);
INSERT INTO "permissions_roles" VALUES(2, 4);
INSERT INTO "permissions_roles" VALUES(2, 5);
INSERT INTO "permissions_roles" VALUES(2, 6);
INSERT INTO "permissions_roles" VALUES(2, 7);
INSERT INTO "permissions_roles" VALUES(2, 8);
INSERT INTO "permissions_roles" VALUES(2, 9);
INSERT INTO "permissions_roles" VALUES(2, 10);
INSERT INTO "permissions_roles" VALUES(2, 11);
INSERT INTO "permissions_roles" VALUES(2, 12);
CREATE TRIGGER fki_organisms_taxon_id_taxons_id
BEFORE INSERT ON [organisms] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM taxons
             WHERE id = NEW.taxon_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "organisms" violates foreign key constraint "fki_organisms_taxon_id_taxons_id"')
     END;
END;
CREATE TRIGGER fku_organisms_taxon_id_taxons_id
BEFORE UPDATE ON [organisms] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM taxons
             WHERE id = NEW.taxon_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "organisms" violates foreign key constraint "fku_organisms_taxon_id_taxons_id"')
     END;
END;
CREATE TRIGGER fkd_organisms_taxon_id_taxons_id
BEFORE DELETE ON taxons
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'delete on table "taxons" violates foreign key constraint "fkd_organisms_taxon_id_taxons_id"')
  WHERE (SELECT taxon_id FROM organisms WHERE taxon_id = OLD.id) IS NOT NULL;
END;
CREATE TRIGGER fki_experiments_user_id_users_id
BEFORE INSERT ON [experiments] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.user_id IS NOT NULL AND ((SELECT id
             FROM users
             WHERE id = NEW.user_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "experiments" violates foreign key constraint "fki_experiments_user_id_users_id"')
     END;
END;
CREATE TRIGGER fku_experiments_user_id_users_id
BEFORE UPDATE ON [experiments] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.user_id IS NOT NULL AND ((SELECT id
             FROM users
             WHERE id = NEW.user_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "experiments" violates foreign key constraint "fku_experiments_user_id_users_id"')
     END;
END;
CREATE TRIGGER fkd_experiments_user_id_users_id
BEFORE DELETE ON users
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'delete on table "users" violates foreign key constraint "fkd_experiments_user_id_users_id"')
  WHERE (SELECT user_id FROM experiments WHERE user_id = OLD.id) IS NOT NULL;
END;
CREATE TRIGGER fki_data_files_experiment_id_experiments_id
BEFORE INSERT ON [data_files]
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'insert on table "data_files" violates foreign key constraint "fki_data_files_experiment_id_experiments_id"')
  WHERE (SELECT id FROM experiments WHERE id = NEW.experiment_id) IS NULL;
END;
CREATE TRIGGER fku_data_files_experiment_id_experiments_id
BEFORE UPDATE ON [data_files]
FOR EACH ROW BEGIN
    SELECT RAISE(ROLLBACK, 'update on table "data_files" violates foreign key constraint "fku_data_files_experiment_id_experiments_id"')
      WHERE (SELECT id FROM experiments WHERE id = NEW.experiment_id) IS NULL;
END;
CREATE TRIGGER fkd_data_files_experiment_id_experiments_id
BEFORE DELETE ON experiments
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'delete on table "experiments" violates foreign key constraint "fkd_data_files_experiment_id_experiments_id"')
  WHERE (SELECT experiment_id FROM data_files WHERE experiment_id = OLD.id) IS NOT NULL;
END;
CREATE TRIGGER fki_spreadsheets_experiment_id_experiments_id
BEFORE INSERT ON [spreadsheets]
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'insert on table "spreadsheets" violates foreign key constraint "fki_spreadsheets_experiment_id_experiments_id"')
  WHERE (SELECT id FROM experiments WHERE id = NEW.experiment_id) IS NULL;
END;
CREATE TRIGGER fku_spreadsheets_experiment_id_experiments_id
BEFORE UPDATE ON [spreadsheets]
FOR EACH ROW BEGIN
    SELECT RAISE(ROLLBACK, 'update on table "spreadsheets" violates foreign key constraint "fku_spreadsheets_experiment_id_experiments_id"')
      WHERE (SELECT id FROM experiments WHERE id = NEW.experiment_id) IS NULL;
END;
CREATE TRIGGER fkd_spreadsheets_experiment_id_experiments_id
BEFORE DELETE ON experiments
FOR EACH ROW BEGIN
  SELECT RAISE(ROLLBACK, 'delete on table "experiments" violates foreign key constraint "fkd_spreadsheets_experiment_id_experiments_id"')
  WHERE (SELECT experiment_id FROM spreadsheets WHERE experiment_id = OLD.id) IS NOT NULL;
END;
CREATE TRIGGER fki_categories_designs_category_id_categories_id
BEFORE INSERT ON [categories_designs] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM categories
             WHERE id = NEW.category_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_designs" violates foreign key constraint "fki_categories_designs_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fku_categories_designs_category_id_categories_id
BEFORE UPDATE ON [categories_designs] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM categories
             WHERE id = NEW.category_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_designs" violates foreign key constraint "fku_categories_designs_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_designs_category_id_categories_id
BEFORE DELETE ON categories
FOR EACH ROW BEGIN
    DELETE FROM categories_designs WHERE categories_designs.category_id = OLD.id;
END;
CREATE TRIGGER fki_categories_designs_design_id_designs_id
BEFORE INSERT ON [categories_designs] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM designs
             WHERE id = NEW.design_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_designs" violates foreign key constraint "fki_categories_designs_design_id_designs_id"')
     END;
END;
CREATE TRIGGER fku_categories_designs_design_id_designs_id
BEFORE UPDATE ON [categories_designs] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM designs
             WHERE id = NEW.design_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_designs" violates foreign key constraint "fku_categories_designs_design_id_designs_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_designs_design_id_designs_id
BEFORE DELETE ON designs
FOR EACH ROW BEGIN
    DELETE FROM categories_designs WHERE categories_designs.design_id = OLD.id;
END;
CREATE TRIGGER fki_categories_materials_category_id_categories_id
BEFORE INSERT ON [categories_materials] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM categories
             WHERE id = NEW.category_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_materials" violates foreign key constraint "fki_categories_materials_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fku_categories_materials_category_id_categories_id
BEFORE UPDATE ON [categories_materials] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM categories
             WHERE id = NEW.category_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_materials" violates foreign key constraint "fku_categories_materials_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_materials_category_id_categories_id
BEFORE DELETE ON categories
FOR EACH ROW BEGIN
    DELETE FROM categories_materials WHERE categories_materials.category_id = OLD.id;
END;
CREATE TRIGGER fki_categories_materials_material_id_materials_id
BEFORE INSERT ON [categories_materials] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM materials
             WHERE id = NEW.material_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_materials" violates foreign key constraint "fki_categories_materials_material_id_materials_id"')
     END;
END;
CREATE TRIGGER fku_categories_materials_material_id_materials_id
BEFORE UPDATE ON [categories_materials] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM materials
             WHERE id = NEW.material_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_materials" violates foreign key constraint "fku_categories_materials_material_id_materials_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_materials_material_id_materials_id
BEFORE DELETE ON materials
FOR EACH ROW BEGIN
    DELETE FROM categories_materials WHERE categories_materials.material_id = OLD.id;
END;
CREATE TRIGGER fki_categories_taxons_category_id_categories_id
BEFORE INSERT ON [categories_taxons] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.category_id IS NOT NULL AND ((SELECT id
             FROM categories
             WHERE id = NEW.category_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_taxons" violates foreign key constraint "fki_categories_taxons_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fku_categories_taxons_category_id_categories_id
BEFORE UPDATE ON [categories_taxons] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.category_id IS NOT NULL AND ((SELECT id
             FROM categories
             WHERE id = NEW.category_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_taxons" violates foreign key constraint "fku_categories_taxons_category_id_categories_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_taxons_category_id_categories_id
BEFORE DELETE ON categories
FOR EACH ROW BEGIN
    DELETE FROM categories_taxons WHERE categories_taxons.category_id = OLD.id;
END;
CREATE TRIGGER fki_categories_taxons_taxon_id_taxons_id
BEFORE INSERT ON [categories_taxons] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.taxon_id IS NOT NULL AND ((SELECT id
             FROM taxons
             WHERE id = NEW.taxon_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "categories_taxons" violates foreign key constraint "fki_categories_taxons_taxon_id_taxons_id"')
     END;
END;
CREATE TRIGGER fku_categories_taxons_taxon_id_taxons_id
BEFORE UPDATE ON [categories_taxons] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN NEW.taxon_id IS NOT NULL AND ((SELECT id
             FROM taxons
             WHERE id = NEW.taxon_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "categories_taxons" violates foreign key constraint "fku_categories_taxons_taxon_id_taxons_id"')
     END;
END;
CREATE TRIGGER fkdc_categories_taxons_taxon_id_taxons_id
BEFORE DELETE ON taxons
FOR EACH ROW BEGIN
    DELETE FROM categories_taxons WHERE categories_taxons.taxon_id = OLD.id;
END;
CREATE TRIGGER fki_design_instances_design_id_designs_id
BEFORE INSERT ON [design_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM designs
             WHERE id = NEW.design_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "design_instances" violates foreign key constraint "fki_design_instances_design_id_designs_id"')
     END;
END;
CREATE TRIGGER fku_design_instances_design_id_designs_id
BEFORE UPDATE ON [design_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM designs
             WHERE id = NEW.design_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "design_instances" violates foreign key constraint "fku_design_instances_design_id_designs_id"')
     END;
END;
CREATE TRIGGER fkdc_design_instances_design_id_designs_id
BEFORE DELETE ON designs
FOR EACH ROW BEGIN
    DELETE FROM design_instances WHERE design_instances.design_id = OLD.id;
END;
CREATE TRIGGER fki_design_instances_experiment_id_experiments_id
BEFORE INSERT ON [design_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "design_instances" violates foreign key constraint "fki_design_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fku_design_instances_experiment_id_experiments_id
BEFORE UPDATE ON [design_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "design_instances" violates foreign key constraint "fku_design_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fkdc_design_instances_experiment_id_experiments_id
BEFORE DELETE ON experiments
FOR EACH ROW BEGIN
    DELETE FROM design_instances WHERE design_instances.experiment_id = OLD.id;
END;
CREATE TRIGGER fki_material_instances_material_id_materials_id
BEFORE INSERT ON [material_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM materials
             WHERE id = NEW.material_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "material_instances" violates foreign key constraint "fki_material_instances_material_id_materials_id"')
     END;
END;
CREATE TRIGGER fku_material_instances_material_id_materials_id
BEFORE UPDATE ON [material_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM materials
             WHERE id = NEW.material_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "material_instances" violates foreign key constraint "fku_material_instances_material_id_materials_id"')
     END;
END;
CREATE TRIGGER fkdc_material_instances_material_id_materials_id
BEFORE DELETE ON materials
FOR EACH ROW BEGIN
    DELETE FROM material_instances WHERE material_instances.material_id = OLD.id;
END;
CREATE TRIGGER fki_material_instances_experiment_id_experiments_id
BEFORE INSERT ON [material_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "material_instances" violates foreign key constraint "fki_material_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fku_material_instances_experiment_id_experiments_id
BEFORE UPDATE ON [material_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "material_instances" violates foreign key constraint "fku_material_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fkdc_material_instances_experiment_id_experiments_id
BEFORE DELETE ON experiments
FOR EACH ROW BEGIN
    DELETE FROM material_instances WHERE material_instances.experiment_id = OLD.id;
END;
CREATE TRIGGER fki_organism_instances_organism_id_organisms_id
BEFORE INSERT ON [organism_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM organisms
             WHERE id = NEW.organism_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "organism_instances" violates foreign key constraint "fki_organism_instances_organism_id_organisms_id"')
     END;
END;
CREATE TRIGGER fku_organism_instances_organism_id_organisms_id
BEFORE UPDATE ON [organism_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM organisms
             WHERE id = NEW.organism_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "organism_instances" violates foreign key constraint "fku_organism_instances_organism_id_organisms_id"')
     END;
END;
CREATE TRIGGER fkdc_organism_instances_organism_id_organisms_id
BEFORE DELETE ON organisms
FOR EACH ROW BEGIN
    DELETE FROM organism_instances WHERE organism_instances.organism_id = OLD.id;
END;
CREATE TRIGGER fki_organism_instances_experiment_id_experiments_id
BEFORE INSERT ON [organism_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "organism_instances" violates foreign key constraint "fki_organism_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fku_organism_instances_experiment_id_experiments_id
BEFORE UPDATE ON [organism_instances] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM experiments
             WHERE id = NEW.experiment_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "organism_instances" violates foreign key constraint "fku_organism_instances_experiment_id_experiments_id"')
     END;
END;
CREATE TRIGGER fkdc_organism_instances_experiment_id_experiments_id
BEFORE DELETE ON experiments
FOR EACH ROW BEGIN
    DELETE FROM organism_instances WHERE organism_instances.experiment_id = OLD.id;
END;
CREATE TRIGGER fki_roles_users_user_id_users_id
BEFORE INSERT ON [roles_users] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM users
             WHERE id = NEW.user_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "roles_users" violates foreign key constraint "fki_roles_users_user_id_users_id"')
     END;
END;
CREATE TRIGGER fku_roles_users_user_id_users_id
BEFORE UPDATE ON [roles_users] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM users
             WHERE id = NEW.user_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "roles_users" violates foreign key constraint "fku_roles_users_user_id_users_id"')
     END;
END;
CREATE TRIGGER fkdc_roles_users_user_id_users_id
BEFORE DELETE ON users
FOR EACH ROW BEGIN
    DELETE FROM roles_users WHERE roles_users.user_id = OLD.id;
END;
CREATE TRIGGER fki_roles_users_role_id_roles_id
BEFORE INSERT ON [roles_users] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM roles
             WHERE id = NEW.role_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "roles_users" violates foreign key constraint "fki_roles_users_role_id_roles_id"')
     END;
END;
CREATE TRIGGER fku_roles_users_role_id_roles_id
BEFORE UPDATE ON [roles_users] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM roles
             WHERE id = NEW.role_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "roles_users" violates foreign key constraint "fku_roles_users_role_id_roles_id"')
     END;
END;
CREATE TRIGGER fkdc_roles_users_role_id_roles_id
BEFORE DELETE ON roles
FOR EACH ROW BEGIN
    DELETE FROM roles_users WHERE roles_users.role_id = OLD.id;
END;
CREATE TRIGGER fki_permissions_roles_role_id_roles_id
BEFORE INSERT ON [permissions_roles] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM roles
             WHERE id = NEW.role_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "permissions_roles" violates foreign key constraint "fki_permissions_roles_role_id_roles_id"')
     END;
END;
CREATE TRIGGER fku_permissions_roles_role_id_roles_id
BEFORE UPDATE ON [permissions_roles] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM roles
             WHERE id = NEW.role_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "permissions_roles" violates foreign key constraint "fku_permissions_roles_role_id_roles_id"')
     END;
END;
CREATE TRIGGER fkdc_permissions_roles_role_id_roles_id
BEFORE DELETE ON roles
FOR EACH ROW BEGIN
    DELETE FROM permissions_roles WHERE permissions_roles.role_id = OLD.id;
END;
CREATE TRIGGER fki_permissions_roles_permission_id_permissions_id
BEFORE INSERT ON [permissions_roles] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM permissions
             WHERE id = NEW.permission_id)
         IS NULL)
     THEN RAISE(ABORT, 'insert on table "permissions_roles" violates foreign key constraint "fki_permissions_roles_permission_id_permissions_id"')
     END;
END;
CREATE TRIGGER fku_permissions_roles_permission_id_permissions_id
BEFORE UPDATE ON [permissions_roles] FOR EACH ROW
  BEGIN
  SELECT CASE
     WHEN ((SELECT id
             FROM permissions
             WHERE id = NEW.permission_id )
         IS NULL)
     THEN RAISE(ABORT, 'update on table "permissions_roles" violates foreign key constraint "fku_permissions_roles_permission_id_permissions_id"')
     END;
END;
CREATE TRIGGER fkdc_permissions_roles_permission_id_permissions_id
BEFORE DELETE ON permissions
FOR EACH ROW BEGIN
    DELETE FROM permissions_roles WHERE permissions_roles.permission_id = OLD.id;
END;
COMMIT;
